__NUXT_JSONP__("/de/projects/graph-editor", (function(a,b,c,d,e,f,g,h,i,j,k,l){return {data:[{project:{slug:f,description:"Editor für gerichtete Graphen, gebaut mit D3.js.",title:g,repository:f,demo:h,toc:[{id:i,depth:2,text:j}],body:{type:"root",children:[{type:b,tag:e,props:{},children:[{type:a,value:"Für meine Bachelorarbeit benötigte ich einen interaktiven Grapheditor.\nBasierend auf dieser Implementierung habe ich ein abgespecktes Demo-Tool erstellt.\nIch entfernte domänenspezifische Features, wie das Hinzufügen von Labels zu Knoten und Links, und portierte es von Angular nach Vue."}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"Es war überraschend schwierig, browserübergreifende Touch-Controls zu realisieren, da sich einige Events sehr unterschiedlich verhalten.\nObwohl ich für die Erstellung von Links auf "},{type:b,tag:d,props:{},children:[{type:a,value:"PointerEvent"}]},{type:a,value:" zurückgriff, führten Maus- und Touch-Interaktion dazu, dass Ereignisse für unterschiedliche DOM-Elemente ausgelöst wurden.\nInsbesondere lieferten Touch-Eingaben immer die gleichen Elemente für "},{type:b,tag:d,props:{},children:[{type:a,value:"pointerdown"}]},{type:a,value:" und "},{type:b,tag:d,props:{},children:[{type:a,value:k}]},{type:a,value:".\nDies geschah unabhängig von dem tatsächlichen Element, das "},{type:b,tag:d,props:{},children:[{type:a,value:k}]},{type:a,value:" hätte liefern sollen, und entsprach nicht dem Verhalten von Mauseingaben."}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"Die Lösung war die Verwendung von separaten Events für Maus- und Touch-Eingaben.\nAußerdem prüfen Touch-Ereignisse nun auf Überschneidungen zwischen Knoten und Mauszeiger, um ein Erstellen von Links zu erkennen."}]},{type:a,value:c},{type:b,tag:"h2",props:{id:i},children:[{type:b,tag:"a",props:{ariaHidden:"true",href:"#demo",tabIndex:-1},children:[{type:b,tag:"span",props:{className:["icon","icon-link"]},children:[]}]},{type:a,value:j}]},{type:a,value:c},{type:b,tag:"demo-frame",props:{src:h,title:g},children:[{type:a,value:c}]}]},dir:"\u002Fde\u002Fprojects",path:"\u002Fde\u002Fprojects\u002Fgraph-editor",extension:".md",createdAt:l,updatedAt:l,readingTime:"1 min read",bodyText:"\u003Cp\u003EFür meine Bachelorarbeit benötigte ich einen interaktiven Grapheditor.\nBasierend auf dieser Implementierung habe ich ein abgespecktes Demo-Tool erstellt.\nIch entfernte domänenspezifische Features, wie das Hinzufügen von Labels zu Knoten und Links, und portierte es von Angular nach Vue.\u003C\u002Fp\u003E\n\u003Cp\u003EEs war überraschend schwierig, browserübergreifende Touch-Controls zu realisieren, da sich einige Events sehr unterschiedlich verhalten.\nObwohl ich für die Erstellung von Links auf \u003Ccode\u003EPointerEvent\u003C\u002Fcode\u003E zurückgriff, führten Maus- und Touch-Interaktion dazu, dass Ereignisse für unterschiedliche DOM-Elemente ausgelöst wurden.\nInsbesondere lieferten Touch-Eingaben immer die gleichen Elemente für \u003Ccode\u003Epointerdown\u003C\u002Fcode\u003E und \u003Ccode\u003Epointerup\u003C\u002Fcode\u003E.\nDies geschah unabhängig von dem tatsächlichen Element, das \u003Ccode\u003Epointerup\u003C\u002Fcode\u003E hätte liefern sollen, und entsprach nicht dem Verhalten von Mauseingaben.\u003C\u002Fp\u003E\n\u003Cp\u003EDie Lösung war die Verwendung von separaten Events für Maus- und Touch-Eingaben.\nAußerdem prüfen Touch-Ereignisse nun auf Überschneidungen zwischen Knoten und Mauszeiger, um ein Erstellen von Links zu erkennen.\u003C\u002Fp\u003E\n\u003Ch2\u003EDemo\u003C\u002Fh2\u003E\n\u003Cp\u003E&lt;demo-frame src=&quot;https:\u002F\u002Fgraph.yeger.eu&quot; title=&quot;Graph Editor&quot;&gt;&lt;\u002Fdemo-frame&gt;\u003C\u002Fp\u003E\n"},prev:{slug:"finwa",title:"FinWa",path:"\u002Fde\u002Fprojects\u002Ffinwa"},next:{slug:"koffee",title:"Koffee",path:"\u002Fde\u002Fprojects\u002Fkoffee"}}],fetch:{},mutations:[]}}("text","element","\n","code","p","graph-editor","Graph Editor","https:\u002F\u002Fgraph.yeger.eu","demo","Demo","pointerup","2021-07-29T22:49:06.565Z")));