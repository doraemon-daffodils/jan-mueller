__NUXT_JSONP__("/de/projects/apollo", (function(a,b,c,d,e,f,g,h,i,j,k,l){return {data:[{project:{slug:i,description:"Eine Webanwendung zur prädikatenlogischen Modellprüfung von Graphstrukturen.",title:"Apollo",repositories:[i,"apollo-frontend","apollo-backend"],demo:"https:\u002F\u002Fapollo.yeger.eu",thumbnail:"apollo\u002Fthumbnail.webp",toc:[],body:{type:"root",children:[{type:b,tag:h,props:{},children:[{type:a,value:"Apollo, eine Webanwendung zur prädikatenlogischen Modellprüfung von Graphstrukturen, ist das Ergebnis meiner "},{type:b,tag:"nuxt-link",props:{to:"\u002Fde\u002Fdocuments\u002Fbachelor-thesis"},children:[{type:a,value:"Bachelorarbeit"}]},{type:a,value:"."}]},{type:a,value:j},{type:b,tag:h,props:{},children:[{type:a,value:"Das "},{type:b,tag:c,props:{href:"https:\u002F\u002Fgithub.com\u002FDerYeger\u002Fapollo-backend\u002F",rel:[d,e,f],target:g},children:[{type:a,value:"Backend"}]},{type:a,value:" ist eine Kotlin\u002FJVM Anwendung.\nEs ist für das Parsen von Formeln der Prädikatenlogik erster Ordnung und die Durchführung des Modellprüfungsalgorithmus verantwortlich.\nSeine Parsing- und Validierungslogik basiert auf einer Java-Desktop-Anwendung von Arno Ehle und Benedikt Hruschka.\nDer Modellprüfungsalgorithmus wurde jedoch von Grund auf neu geschrieben, um verschiedene Feedback-Stufen zur Visualisierung der Ergebnisse zu generieren.\nDie Codebasis wird fast vollständig durch Tests abgedeckt und verfügt über automatisch generierte [Dokumentation] ("},{type:b,tag:c,props:{href:k,rel:[d,e,f],target:g},children:[{type:a,value:k}]},{type:a,value:")."}]},{type:a,value:j},{type:b,tag:h,props:{},children:[{type:a,value:"Apollos "},{type:b,tag:c,props:{href:"https:\u002F\u002Fgithub.com\u002FDerYeger\u002Fapollo-frontend\u002F",rel:[d,e,f],target:g},children:[{type:a,value:"Frontend"}]},{type:a,value:" ist eine Angular-PWA.\nEin interaktiver Grapheditor, welcher eigens mit D3.js entwickelt wurde, ermöglicht eine Erstellung von Graphstrukturen.\nGraphen können sowohl lokal gespeichert als auch in den Formaten JSON und YAML exportiert sowie importiert werden.\nDie Ergebnisse des Modellprüfungsalgorithmus werden in einer Baumstruktur visualisiert, in der jeder Knoten eine geprüfte (Unter-)Formel repräsentiert.\nMithilfe von "},{type:b,tag:"em",props:{},children:[{type:a,value:"compodoc"}]},{type:a,value:" wird die "},{type:b,tag:c,props:{href:"https:\u002F\u002Fapollo-frontend.yeger.eu\u002F",rel:[d,e,f],target:g},children:[{type:a,value:"Dokumentation"}]},{type:a,value:" des Frontends bei Releases automatisch generiert."}]}]},dir:"\u002Fde\u002Fprojects",path:"\u002Fde\u002Fprojects\u002Fapollo",extension:".md",createdAt:l,updatedAt:l,readingTime:"1 min read",bodyText:"\u003Cp\u003EApollo, eine Webanwendung zur prädikatenlogischen Modellprüfung von Graphstrukturen, ist das Ergebnis meiner \u003Ca href=\"\u002Fde\u002Fdocuments\u002Fbachelor-thesis\"\u003EBachelorarbeit\u003C\u002Fa\u003E.\u003C\u002Fp\u003E\n\u003Cp\u003EDas \u003Ca href=\"https:\u002F\u002Fgithub.com\u002FDerYeger\u002Fapollo-backend\u002F\"\u003EBackend\u003C\u002Fa\u003E ist eine Kotlin\u002FJVM Anwendung.\nEs ist für das Parsen von Formeln der Prädikatenlogik erster Ordnung und die Durchführung des Modellprüfungsalgorithmus verantwortlich.\nSeine Parsing- und Validierungslogik basiert auf einer Java-Desktop-Anwendung von Arno Ehle und Benedikt Hruschka.\nDer Modellprüfungsalgorithmus wurde jedoch von Grund auf neu geschrieben, um verschiedene Feedback-Stufen zur Visualisierung der Ergebnisse zu generieren.\nDie Codebasis wird fast vollständig durch Tests abgedeckt und verfügt über automatisch generierte [Dokumentation] (https:\u002F\u002Fapollo-backend.yeger.eu\u002F).\u003C\u002Fp\u003E\n\u003Cp\u003EApollos \u003Ca href=\"https:\u002F\u002Fgithub.com\u002FDerYeger\u002Fapollo-frontend\u002F\"\u003EFrontend\u003C\u002Fa\u003E ist eine Angular-PWA.\nEin interaktiver Grapheditor, welcher eigens mit D3.js entwickelt wurde, ermöglicht eine Erstellung von Graphstrukturen.\nGraphen können sowohl lokal gespeichert als auch in den Formaten JSON und YAML exportiert sowie importiert werden.\nDie Ergebnisse des Modellprüfungsalgorithmus werden in einer Baumstruktur visualisiert, in der jeder Knoten eine geprüfte (Unter-)Formel repräsentiert.\nMithilfe von \u003Cem\u003Ecompodoc\u003C\u002Fem\u003E wird die \u003Ca href=\"https:\u002F\u002Fapollo-frontend.yeger.eu\u002F\"\u003EDokumentation\u003C\u002Fa\u003E des Frontends bei Releases automatisch generiert.\u003C\u002Fp\u003E\n"},prev:{slug:"an-26",title:"An-26",path:"\u002Fde\u002Fprojects\u002Fan-26"},next:{slug:"cyk-algorithm",title:"CYK Algorithm",path:"\u002Fde\u002Fprojects\u002Fcyk-algorithm"}}],fetch:{},mutations:[]}}("text","element","a","nofollow","noopener","noreferrer","_blank","p","apollo","\n","https:\u002F\u002Fapollo-backend.yeger.eu\u002F","2021-08-08T18:52:20.343Z")));