{
    "version": "https://jsonfeed.org/version/1",
    "title": "Jan's Blog",
    "home_page_url": "https://jan-mueller.at/blog",
    "description": "Software engineering and computer science.",
    "items": [
        {
            "id": "https://jan-mueller.at/blog/nuxt-vue-and-typescript",
            "content_html": "<h2>Routing</h2>\n<p>After following an <a href=\"https://nuxtjs.org/blog/creating-blog-with-nuxt-content\">official guide</a> to get started, I had weird issues with routing.\nMy problem was the following project structure:</p>\n<pre><code>├── pages\n│   ├── index.vue\n│   ├── blog.vue\n│   ├── blog\n│   │   └── _slug.vue\n</code></pre>\n<p>When navigating from <code>/blog</code> to e.g. <code>/blog/hello-world</code>, the route changed and the component was instantiated, but the DOM didn't change.\nAfter some trial and error I found an easy fix (which I should have discovered earlier to be fair):\nMoving <code>blog.vue</code> to <code>/blog/index.vue</code>, as seen below.</p>\n<pre><code>├── pages\n│   ├── index.vue\n│   ├── blog\n│   │   ├── index.vue\n│   │   └── _slug.vue\n</code></pre>\n<h2>Problems with type checking</h2>\n<p>Even though I selected TypeScript in <code>create-nuxt-app</code>, the generated code wasn't set up properly.\n(<strong>Update:</strong> The problem has been fixed in a new version of <code>create-nuxt-app</code>.)\nFor one, the TypeScript dependency was missing in <code>package.json</code>.\nFurthermore, I replaced all <code>nuxt-ts</code> commands with <code>nuxt</code> since they were causing warnings.\nComponents declared as</p>\n<pre><code class=\"language-ts[pages/index.vue]\">export default {\n  ...\n}\n</code></pre>\n<p>or</p>\n<pre><code class=\"language-ts[pages/index.vue]\">import Vue from 'vue'\n\nexport default Vue.extend({\n  ...\n})\n</code></pre>\n<p>had issues with type checking, resulting in errors during static site generation.\nInstead, I had to use the composition API.\nSince I am using Nuxt 2.x.x I had to resort to the <a href=\"https://composition-api.nuxtjs.org/\">Nuxt Composition API</a>.</p>\n<pre><code class=\"language-ts[pages/index.vue]\">import { defineComponent } from '@nuxtjs/composition-api'\n\nexport default defineComponent({\n  ...\n})\n</code></pre>\n<h2>Styling Markdown code with Prism</h2>\n<p>Turns out Vuetify's styles are colliding with Prism's.\nAn easy fix is to unset the styles of the affected code blocks.</p>\n<pre><code class=\"language-scss[assets/style.scss]\">.nuxt-content-highlight code {\n    all: unset !important;\n}\n</code></pre>\n<h2>Opinion and conclusion</h2>\n<p>So far using Nuxt was a refreshing experience.\nThe possibility to iterate rather quickly compared to Angular is nice.\nBuild times and nearly instantaneous changes are awesome.\nThough opaque (and in some cases missing) error messages resulted in an avoidable and cumbersome roadblock.\nAfter building multiple websites using the Nuxt, Vue, and TypeScript stack and learning about most of its quirks, my opinion has shifted to the positive.\nThe speed of development and ease of UI development that comes with frameworks like Vuetify has resulted in a highly enjoyable experience.</p>\n",
            "url": "https://jan-mueller.at/blog/nuxt-vue-and-typescript",
            "title": "Nuxt, Vue and TypeScript",
            "summary": "My early experiences and troubles with the creation of a blog using Nuxt Content.",
            "date_modified": "2021-03-17T00:00:00.000Z"
        },
        {
            "id": "https://jan-mueller.at/blog/vue-masonry-wall",
            "content_html": "<h2>Introduction</h2>\n<p>In quite a few of my Vue 2 projects I'm using the library <a href=\"https://github.com/fuxingloh/vue-masonry-wall\">vue-masonry-wall</a>.\nIts ease-of-use and SSR support were key factors in my decision to use this library in particular.</p>\n<p>However, I'm currently in the progress of preparing my projects for the release of Nuxt 3 and the accompanying migration to Vue 3.\nSince I couldn't find a comparable masonry layout for Vue 3, I chose to create a new library based on <a href=\"https://github.com/fuxingloh\">Fuxing Loh's</a> <code>vue-masonry-wall</code>.</p>\n<p>The result is <a href=\"https://github.com/DerYeger/vue-masonry-wall\">@yeger/vue-masonry-wall</a>, a rewrite of the original library in TypeScript and Vue 3.\nIt has no dependencies, resulting in a bundle size decrease of up to 54%.</p>\n<p>I also created <a href=\"https://github.com/DerYeger/vue2-masonry-wall\">@yeger/vue2-masonry-wall</a> for use in Vue 2 projects.\nIt, too, drops any dependencies, achieving a bundle size decrease of up to 40%</p>\n<p>In addition, multiple issues have been fixed.\nNotably, padding is now considered while calculating the column count, and the removal of elements is now supported.</p>\n<h2>Installation</h2>\n<h3>Vue 2</h3>\n<pre><code class=\"language-bash[bash]\"># yarn\n$ yarn add @yeger/vue2-masonry-wall\n\n# npm\n$ npm install @yeger/vue2-masonry-wall\n</code></pre>\n<p>First, you have to install the component like any other plugin.\nConsult the <a href=\"https://vuejs.org/v2/guide/plugins.html#Using-a-Plugin\">Vue 2 documentation</a> for detailed information on installing plugins.</p>\n<pre><code class=\"language-ts[ts]\">import Vue from 'vue'\nimport MasonryWall from '@yeger/vue2-masonry-wall'\n\nVue.use(MasonryWall)\n</code></pre>\n<h3>Vue 3</h3>\n<pre><code class=\"language-bash[bash]\"># yarn\n$ yarn add @yeger/vue-masonry-wall\n\n# npm\n$ npm install @yeger/vue-masonry-wall\n</code></pre>\n<p>First, you have to install the component like any other plugin.\nConsult the <a href=\"https://v3.vuejs.org/guide/plugins.html#using-a-plugin\">Vue 3 documentation</a> for detailed information on installing plugins.</p>\n<pre><code class=\"language-ts[ts]\">import { createApp } from 'vue'\nimport MasonryWall from '@yeger/vue-masonry-wall'\n\nconst app = createApp()\n\napp.use(MasonryWall)\n</code></pre>\n<h2>Usage</h2>\n<p>The component is available as <code>masonry-wall</code> or <code>MasonryWall</code>.\nThe only required prop is <code>items</code>, an array of type <code>any</code>.\nEach element of <code>items</code> is passed to the default slot, alongside its index.\nThe prop <code>columnWidth</code> takes in a <code>number</code>, specifying the targeted column width.\nIt is used to calculate the column count but does not define the actual width of columns.\nSimilarly, <code>padding</code> defines the padding between items in pixels and is respected while calculating the column count.\nLastly, the prop <code>ssrColumns</code> can be used to specify the column count in server-side-rendering contexts.</p>\n<p>While every prop of the component is reactive, mutations to the <code>items</code> array will not update the layout.\nTo force updates, assign a new array to the <code>items</code> prop.</p>\n<p>The following example demonstrates basic usage of the component.\nFor interactive demonstrations, visit <a href=\"https://vue-masonry-wall.yeger.eu/\">vue-masonry-wall.yeger.eu</a> or <a href=\"https://vue2-masonry-wall.yeger.eu/\">vue2-masonry-wall.yeger.eu</a>.</p>\n<pre><code class=\"language-vue[vue]\">&lt;template&gt;\n  &lt;masonry-wall :items=&quot;items&quot; :ssr-columns=&quot;1&quot; :column-width=&quot;300&quot; :padding=&quot;16&quot;&gt;\n    &lt;template #default=&quot;{ item, index }&quot;&gt;\n      &lt;div :style=&quot;`height: ${item.height}px`&quot;&gt;\n        &lt;h1&gt;{{ item.title }}&lt;/h1&gt;\n        &lt;span&gt;{{ item.description }}&lt;/span&gt;\n      &lt;/div&gt;\n    &lt;/template&gt;\n  &lt;/masonry-wall&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n  data() {\n    return {\n      items: [\n        { title: 'First', description: 'The first item.', height: 150 },\n        { title: 'Second', description: 'The second item.', height: 300 },\n        { title: 'Third', description: 'The second item.', height: 150 },\n        { title: 'Fourth', description: 'The second item.', height: 450 },\n      ]\n    }\n  }\n}\n&lt;/script&gt;\n</code></pre>\n",
            "url": "https://jan-mueller.at/blog/vue-masonry-wall",
            "title": "Masonry layout for Vue 2 and Vue 3",
            "summary": "Responsive masonry layout with SSR support and zero dependencies for Vue 2 and Vue 3.",
            "date_modified": "2021-08-16T00:00:00.000Z"
        }
    ]
}