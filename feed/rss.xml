<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>Jan&apos;s Blog</title>
        <link>https://jan-mueller.at/blog</link>
        <description>Software engineering and computer science.</description>
        <lastBuildDate>Thu, 16 Dec 2021 04:00:46 GMT</lastBuildDate>
        <docs>http://blogs.law.harvard.edu/tech/rss</docs>
        <generator>https://github.com/nuxt-community/feed-module</generator>
        <language>en</language>
        <item>
            <title><![CDATA[Creating a blog with Nuxt, Vue and TypeScript]]></title>
            <link>https://jan-mueller.at/blog/nuxt-vue-and-typescript</link>
            <guid>https://jan-mueller.at/blog/nuxt-vue-and-typescript</guid>
            <pubDate>Wed, 17 Mar 2021 00:00:00 GMT</pubDate>
            <description><![CDATA[My early experiences and troubles with the creation of a blog using Nuxt Content.]]></description>
            <content:encoded><![CDATA[<h2>Routing</h2>
<p>After following an <a href="https://nuxtjs.org/blog/creating-blog-with-nuxt-content">official guide</a> to get started, I had weird issues with routing.
My problem was the following project structure:</p>
<pre><code>├── pages
│   ├── index.vue
│   ├── blog.vue
│   ├── blog
│   │   └── _slug.vue
</code></pre>
<p>When navigating from <code>/blog</code> to e.g. <code>/blog/hello-world</code>, the route changed and the component was instantiated, but the DOM didn't change.
After some trial and error I found an easy fix (which I should have discovered earlier to be fair):
Moving <code>blog.vue</code> to <code>/blog/index.vue</code>, as seen below.</p>
<pre><code>├── pages
│   ├── index.vue
│   ├── blog
│   │   ├── index.vue
│   │   └── _slug.vue
</code></pre>
<h2>Problems with type checking</h2>
<p>Even though I selected TypeScript in <code>create-nuxt-app</code>, the generated code wasn't set up properly.
(<strong>Update:</strong> The problem has been fixed in a new version of <code>create-nuxt-app</code>.)
For one, the TypeScript dependency was missing in <code>package.json</code>.
Furthermore, I replaced all <code>nuxt-ts</code> commands with <code>nuxt</code> since they were causing warnings.
Components declared as</p>
<pre><code class="language-ts[pages/index.vue]">export default {
  ...
}
</code></pre>
<p>or</p>
<pre><code class="language-ts[pages/index.vue]">import Vue from 'vue'

export default Vue.extend({
  ...
})
</code></pre>
<p>had issues with type checking, resulting in errors during static site generation.
Instead, I had to use the composition API.
Since I am using Nuxt 2.x.x I had to resort to the <a href="https://composition-api.nuxtjs.org/">Nuxt Composition API</a>.</p>
<pre><code class="language-ts[pages/index.vue]">import { defineComponent } from '@nuxtjs/composition-api'

export default defineComponent({
  ...
})
</code></pre>
<h2>Styling Markdown code with Prism</h2>
<p>Turns out Vuetify's styles are colliding with Prism's.
An easy fix is to unset the styles of the affected code blocks.</p>
<pre><code class="language-scss[assets/style.scss]">.nuxt-content-highlight code {
    all: unset !important;
}
</code></pre>
<h2>Opinion and conclusion</h2>
<p>So far using Nuxt was a refreshing experience.
The possibility to iterate rather quickly compared to Angular is nice.
Build times and nearly instantaneous changes are awesome.
Though opaque (and in some cases missing) error messages resulted in an avoidable and cumbersome roadblock.
After building multiple websites using the Nuxt, Vue, and TypeScript stack and learning about most of its quirks, my opinion has shifted to the positive.
The speed of development and ease of UI development that comes with frameworks like Vuetify has resulted in a highly enjoyable experience.</p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Masonry layout for Vue 2 and Vue 3]]></title>
            <link>https://jan-mueller.at/blog/vue-masonry-wall</link>
            <guid>https://jan-mueller.at/blog/vue-masonry-wall</guid>
            <pubDate>Mon, 16 Aug 2021 00:00:00 GMT</pubDate>
            <description><![CDATA[Responsive masonry layout with SSR support and zero dependencies for Vue 2 and Vue 3.]]></description>
            <content:encoded><![CDATA[<h2>Introduction</h2>
<p>In quite a few of my Vue 2 projects I'm using the library <a href="https://github.com/fuxingloh/vue-masonry-wall">vue-masonry-wall</a>.
Its ease-of-use and SSR support were key factors in my decision to use this library in particular.</p>
<p>However, I'm currently in the progress of preparing my projects for the release of Nuxt 3 and the accompanying migration to Vue 3.
Since I couldn't find a comparable masonry layout for Vue 3, I chose to create a new library based on <a href="https://github.com/fuxingloh">Fuxing Loh's</a> <code>vue-masonry-wall</code>.</p>
<p>The result is <a href="https://github.com/DerYeger/vue-masonry-wall">@yeger/vue-masonry-wall</a>, a rewrite of the original library in TypeScript and Vue 3.
It has no dependencies, resulting in a bundle size decrease of up to 54%.</p>
<p>I also created <a href="https://github.com/DerYeger/vue2-masonry-wall">@yeger/vue2-masonry-wall</a> for use in Vue 2 projects.
It, too, drops any dependencies, achieving a bundle size decrease of up to 40%</p>
<p>In addition, multiple issues have been fixed.
Notably, spacing (<code>gap</code>) is now considered while calculating the column count, and the removal of elements is now supported.</p>
<h2>Installation</h2>
<h3>Vue 2</h3>
<pre><code class="language-bash[bash]"># yarn
$ yarn add @yeger/vue2-masonry-wall

# npm
$ npm install @yeger/vue2-masonry-wall
</code></pre>
<p>First, you have to install the component like any other plugin.
Consult the <a href="https://vuejs.org/v2/guide/plugins.html#Using-a-Plugin">Vue 2 documentation</a> for detailed information on installing plugins.</p>
<pre><code class="language-ts[ts]">import Vue from 'vue'
import MasonryWall from '@yeger/vue2-masonry-wall'

Vue.use(MasonryWall)
</code></pre>
<h3>Vue 3</h3>
<pre><code class="language-bash[bash]"># yarn
$ yarn add @yeger/vue-masonry-wall

# npm
$ npm install @yeger/vue-masonry-wall
</code></pre>
<p>First, you have to install the component like any other plugin.
Consult the <a href="https://v3.vuejs.org/guide/plugins.html#using-a-plugin">Vue 3 documentation</a> for detailed information on installing plugins.</p>
<pre><code class="language-ts[ts]">import { createApp } from 'vue'
import MasonryWall from '@yeger/vue-masonry-wall'

const app = createApp()

app.use(MasonryWall)
</code></pre>
<h2>Usage</h2>
<p>The component is available as <code>masonry-wall</code> or <code>MasonryWall</code>.
The only required prop is <code>items</code>, an array of type <code>any</code>.
Each element of <code>items</code> is passed to the default slot, alongside its index.
The prop <code>column-width</code> takes in a <code>number</code>, specifying the targeted column width.
It is used to calculate the column count but does not define the actual width of columns.
Similarly, <code>gap</code> defines the gaps between items in pixels and is respected while calculating the column count.
Lastly, the prop <code>ssr-columns</code> can be used to specify the column count in server-side-rendering contexts.</p>
<p>While every prop of the component is reactive, mutations to the <code>items</code> array will not update the layout.
To force updates, assign a new array to the <code>items</code> prop.</p>
<h3>Example</h3>
<p>The following example demonstrates basic usage of the component.
For interactive demonstrations, visit <a href="https://vue-masonry-wall.yeger.eu/">vue-masonry-wall.yeger.eu</a> or <a href="https://vue2-masonry-wall.yeger.eu/">vue2-masonry-wall.yeger.eu</a>.</p>
<pre><code class="language-vue[vue]">&lt;template&gt;
  &lt;MasonryWall :items=&quot;items&quot; :ssr-columns=&quot;1&quot; :column-width=&quot;300&quot; :gap=&quot;16&quot;&gt;
    &lt;template #default=&quot;{ item }&quot;&gt;
      &lt;div :style=&quot;{ height: `${item.height}px` }&quot;&gt;
        {{ item.content }}
      &lt;/pre&gt;
    &lt;/template&gt;
  &lt;/MasonryWall&gt;
&lt;/template&gt;

&lt;script&gt;
export default {
  data() {
    return {
      items: [
        { content: 'First', height: 150 },
        { content: 'Second', height: 300 },
        { content: 'Third', height: 150 },
        { content: 'Fourth', height: 450 },
      ]
    }
  }
}
&lt;/script&gt;
</code></pre>
<h3>Result</h3>
<p>&lt;MasonryWallDemo class=&quot;mb-4&quot;&gt;&lt;/MasonryWallDemo&gt;</p>
]]></content:encoded>
        </item>
    </channel>
</rss>